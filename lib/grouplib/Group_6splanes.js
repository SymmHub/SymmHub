import {
    abs,
    sin,
    cos,
    sqrt,
    PI,
    TORADIANS,
    getParam,
    iPlane,
    iSphere,
    iReflectU4,
    isDefined,
    EventProcessor,
    Group, 
}
from './modules.js';

const MYNAME = 'Group_5splanes';

const DEBUG = true;

const EPSILON = 1.e-6;
const TYPE_CIRCLE = 5;
const type_LINE = 6;

//
// provides generators for reflection groups generated by 6 splanes
//
export class Group_5splanes {

    constructor() {

        this.EPSILON = 1.e-10;
        var INC = 1.e-8;

        this.params = {
            n13: 3,
            n23: 3,
            n14: 3,
            n24: 3,
            n15: 2,
            n25: 2,
            n16: 2,
            n26: 2,
            r1: 0.5,
            r2: 1,
            a3: 0,
            a4: 180,
            a5: 270,
            a6: 315,
            
            debug: false,
            uhp: true,
            s1: true,
            s2: true,
            s3: true,
            s4: true,
            s5: false,
            s6: false,
        };
        this.needRecalculate = true;

    }
    getClassName(){
        return MYNAME;
    }

    setOptions(opt){
        if(opt.onChanged){
            this.onGroupChanged = opt.onChanged;
            this.eventProcessor = new EventProcessor();
            this.eventProcessor.addEventListener('onChanged', this.onGroupChanged);
        }                
    }

    //
    // return map of current parameters
    //
    getParamsMap() {

        var p = this.params;
        
        return {
            n13: p.n13,
            n23: p.n23,
            n14: p.n14,
            n24: p.n24,
            n15: p.n15,
            n25: p.n25,
            n16: p.n16,
            n26: p.n26,
            r1: p.r1,
            r2: p.r2,
            a5: p.a5,
            a6: p.a6,
            a3: p.a3,
            a4: p.a4,
            uhp: p.uhp,
            s1: p.s1,
            s2: p.s2,
            s3: p.s3,
            s4: p.s4,
            s5: p.s5,
            s6: p.s6,
        };
    }

    /**
    set parameters from saved paramMap
     */
    setParamsMap(paramsMap) {

        var ctr = this.controllers;

        ctr.n13.setValue(getParam(paramsMap.n13, 2));
        ctr.n23.setValue(getParam(paramsMap.n23, 2));
        ctr.n14.setValue(getParam(paramsMap.n14, 2));
        ctr.n24.setValue(getParam(paramsMap.n24, 3));
        ctr.n15.setValue(getParam(paramsMap.n15, 2));
        ctr.n25.setValue(getParam(paramsMap.n25, 2));
        ctr.n16.setValue(getParam(paramsMap.n16, 2));
        ctr.n26.setValue(getParam(paramsMap.n26, 2));
        ctr.r1.setValue(getParam(paramsMap.r1, 0.5));
        ctr.r2.setValue(getParam(paramsMap.r2, 1));
        ctr.a5.setValue(getParam(paramsMap.a5, 0.));
        ctr.a6.setValue(getParam(paramsMap.a6, 0.));
        ctr.a3.setValue(getParam(paramsMap.a3, 0));
        ctr.a4.setValue(getParam(paramsMap.a4, 0));
        
        ctr.uhp.setValue(getParam(paramsMap.uhp, true));
        ctr.s1.setValue(getParam(paramsMap.s1, true));
        ctr.s2.setValue(getParam(paramsMap.s2, true));
        ctr.s3.setValue(getParam(paramsMap.s3, true));
        ctr.s4.setValue(getParam(paramsMap.s4, true));
        ctr.s5.setValue(getParam(paramsMap.s5, true));
        ctr.s6.setValue(getParam(paramsMap.s6, true));
        

    }

    //
    //  return group description
    //
    getGroup() {
        
        // in case of reflection group we return only fundamental domain
        // pairing transforms are reflections in the domain sides
        if (this.params.debug)
            console.log(`${MYNAME}.gteGroup()`);
        if(this.needRecalculate){
            this.domain = this.getFD();
            this.needRecalculate = false;
        }
        //return this.domain;
        let group = new Group({s: this.domain.s});
        return group;

    }

    //
    //
    //
    initGUI(options) {
        
        var folder = options.folder;
        
        this.onChanged = options.onChanged;
        var onc = this.onParamChanged.bind(this);
        var par = this.params;
        var minIncrement = 1.e-10;
        this.controllers = {};
        var ctr = this.controllers;

        ctr.n13 = folder.add(par, 'n13', 0, 20, 1).onChange(onc);
        ctr.n23 = folder.add(par, 'n23', 0, 20, 1).onChange(onc);
        ctr.n14 = folder.add(par, 'n14', 0, 20, 1).onChange(onc);
        ctr.n24 = folder.add(par, 'n24', 0, 20, 1).onChange(onc);
        ctr.n15 = folder.add(par, 'n15', 0, 20, 1).onChange(onc);
        ctr.n25 = folder.add(par, 'n25', 0, 20, 1).onChange(onc);
        ctr.n16 = folder.add(par, 'n16', 0, 20, 1).onChange(onc);
        ctr.n26 = folder.add(par, 'n26', 0, 20, 1).onChange(onc);
        ctr.r1 = folder.add(par, 'r1', 0.01, 2., minIncrement).onChange(onc);
        ctr.r2 = folder.add(par, 'r2', 0.01, 2., minIncrement).onChange(onc);
        ctr.a3 = folder.add(par, 'a3', -720., 720., minIncrement).onChange(onc);
        ctr.a4 = folder.add(par, 'a4', -720., 720., minIncrement).onChange(onc);
        ctr.a5 = folder.add(par, 'a5', -720., 720., minIncrement).onChange(onc);
        ctr.a6 = folder.add(par, 'a6', -720., 720., minIncrement).onChange(onc);
        ctr.uhp = folder.add(par, 'uhp').onChange(onc);
        
        ctr.s1 = folder.add(par, 's1').onChange(onc);
        ctr.s2 = folder.add(par, 's2').onChange(onc);
        ctr.s3 = folder.add(par, 's3').onChange(onc);
        ctr.s4 = folder.add(par, 's4').onChange(onc);
        ctr.s5 = folder.add(par, 's5').onChange(onc);
        ctr.s6 = folder.add(par, 's6').onChange(onc);
        
        folder.add(par, 'debug');

    }

    //
    // called from UI when any group param was changed (legacy API)
    //
    onParamChanged(){
        this.needRecalculate = true;
        if(DEBUG)console.log(this.constructor.name + '.onParamChanged()', 'eventProcessor:', this.eventProcessor);
        if(this.eventProcessor){
            this.eventProcessor.handleEvent({type:'onChanged', target: this});
        }    
    }
    /*
    onParamChanged(){
        
        this.needRecalculate = true;
        console.log(`${MYNAME}.onParamChanged()`);
        if(isDefined(this.onChanged)){
            
            this.onChanged();
        }       
    }
    */

    //
    //  return the fundamental domain
    //
    getFD() {

        var getAngle = this.getAngle;
        var pm = this.params;

        var a13 = getAngle(pm.n13);
        var a23 = getAngle(pm.n23);
        var a14 = getAngle(pm.n14);
        var a24 = getAngle(pm.n24);
        var a15 = getAngle(pm.n15);
        var a25 = getAngle(pm.n25);
        var a16 = getAngle(pm.n16);
        var a26 = getAngle(pm.n26);
        
        var r1 = Math.min(pm.r1, pm.r2);
        var r2 = Math.max(pm.r1, pm.r2);
        let a3 = pm.a3 * TORADIANS;
        let a4 = pm.a4 * TORADIANS;
        let a5 = pm.a5 * TORADIANS;
        let a6 = pm.a6 * TORADIANS;
        
        //var quad = this.getQuadDomain(a13, a23, a14, a24, r1, r2, a3, a4);
        
        let s1 = iSphere([0., 0., 0., -r1]);
        let s2 = iSphere([0., 0., 0.,  r2]);
        let s3 = getIntersectingSplane(r1,r2,a13, a23, a3);
        let s4 = getIntersectingSplane(r1,r2,a14, a24, a4);
        let s5 = getIntersectingSplane(r1,r2,a15, a25, a5);
        let s6 = getIntersectingSplane(r1,r2,a16, a26, a6);
                     
        let s = [];
        if(pm.s1) s.push(s1);
        if(pm.s2) s.push(s2);
        if(pm.s3) s.push(s3);
        if(pm.s4) s.push(s4);
        if(pm.s5) s.push(s5);
        if(pm.s6) s.push(s6);
        
                
        if (!pm.uhp) {
            // convert into Poincare ball
            var ref = iSphere([0, -1, 0, sqrt(2)]);
            for (var i = 0; i < s.length; i++) {
                s[i] = iReflectU4(ref, s[i]);
            }
        }

        return {s:s};
    }

    //
    //  convert fraction to angle
    //
    getAngle(fraction) {

        if (fraction < 2)
            return 0;
        else
            return Math.PI / fraction;
    }

} // class Group_6splanes

//
//  calculates splane which forms given dihedral angles with two concentric cicles r1 and r2 (r2 > r1) 

//  it returs iSphere of iPlane 
//  
//
function getIntersectingSplane(r1, r2, a1, a2, angle){
    
    var den = (2. * (r1 * cos(a1) + r2 * cos(a2)));
    
    if(abs(den) > EPSILON) {
        let r = (r2 * r2 - r1 * r1) / den;
        let c = sqrt(r1 * r1 + 2. * r1 * r * cos(a1) + r * r);
        return iSphere([c*cos(angle), c*sin(angle), 0., -r]);
    } else {
        return iPlane([cos(angle), sin(angle), 0., 0.]);
    }
}

/*
    getQuadDomain(a13, a23, a14, a24, r1, r2, bend3, bend4) {

        const EPSILON = 1.e-6;

        var b3 = bend3;
        var b4 = bend4;

        var fd = {
            s: []
        };

        var den3 = (2. * (r1 * cos(a13) + r2 * cos(a23)));
        var r3,r4,c3,c4;

        if (abs(den3) > EPSILON) {
            
            r3 = (r2 * r2 - r1 * r1) / den3;
            c3 = sqrt(r1 * r1 + 2. * r1 * r3 * cos(a13) + r3 * r3);
            
            fd.s[2] = iSphere([c3*cos(b3), c3*sin(b3), 0., -r3]);
            
        } else {
            
            fd.s[2] = iPlane([cos(b3), sin(b3), 0., 0.]);
            
        }
        
        var den4 = (2. * (r1 * cos(a14) + r2 * cos(a24)));
        if (abs(den4) > EPSILON) {
            r4 = (r2 * r2 - r1 * r1) / den4;
            c4 = sqrt(r1 * r1 + 2. * r1 * r4 * cos(a14) + r4 * r4);
            fd.s[3] = iSphere([-c4 * cos(b4), c4 * sin(b4), 0., -r4]);
        } else {
            fd.s[3] = iPlane([-cos(b4), sin(b4), 0., 0.]);
        }

        return fd;

    }
    
*/
